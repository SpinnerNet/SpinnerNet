using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json;

namespace SpinnerNet.Shared.Models;

/// <summary>
/// Represents a task in the Zeitsparkasse time banking system
/// Foundation for ZeitCoin earning and time-to-value tracking
/// </summary>
public class Task
{
    /// <summary>
    /// Unique identifier for the task
    /// </summary>
    [Key]
    public string Id { get; set; } = string.Empty;

    /// <summary>
    /// ID of the user who owns this task
    /// </summary>
    [Required]
    public string UserId { get; set; } = string.Empty;

    /// <summary>
    /// Natural language description of the task
    /// </summary>
    [Required]
    [StringLength(500)]
    public string Description { get; set; } = string.Empty;

    /// <summary>
    /// Task title (extracted or provided)
    /// </summary>
    [StringLength(200)]
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// Task category (personal, work, health, etc.)
    /// </summary>
    [StringLength(50)]
    public string Category { get; set; } = "personal";

    /// <summary>
    /// Task priority (low, medium, high, urgent)
    /// </summary>
    [StringLength(20)]
    public string Priority { get; set; } = "medium";

    /// <summary>
    /// Current status of the task
    /// </summary>
    public TaskStatus Status { get; set; } = TaskStatus.Pending;

    /// <summary>
    /// Estimated time to complete in minutes
    /// </summary>
    public int? EstimatedMinutes { get; set; }

    /// <summary>
    /// Actual time spent on task in minutes (for ZeitCoin calculation)
    /// </summary>
    public int? ActualMinutes { get; set; }

    /// <summary>
    /// Due date for the task
    /// </summary>
    public DateTime? DueDate { get; set; }

    /// <summary>
    /// When the task was created
    /// </summary>
    public DateTime CreatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// When the task was last updated
    /// </summary>
    public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

    /// <summary>
    /// When the task was completed (for time banking)
    /// </summary>
    public DateTime? CompletedAt { get; set; }

    /// <summary>
    /// Whether this task contributes to ZeitCoin earning
    /// </summary>
    public bool IsZeitCoinEligible { get; set; } = true;

    /// <summary>
    /// Productivity score (0.0 to 1.0) for ZeitCoin calculation
    /// </summary>
    public double? ProductivityScore { get; set; }

    /// <summary>
    /// Value generated by completing this task (for time-to-value measurement)
    /// </summary>
    public double? ValueGenerated { get; set; }

    /// <summary>
    /// AI-generated tags for the task (stored as JSON)
    /// </summary>
    public string TagsJson { get; set; } = "[]";

    /// <summary>
    /// Additional metadata (stored as JSON)
    /// </summary>
    public string MetadataJson { get; set; } = "{}";

    /// <summary>
    /// Notes about the task
    /// </summary>
    public string? Notes { get; set; }

    /// <summary>
    /// Foreign key to User
    /// </summary>
    [ForeignKey(nameof(UserId))]
    public User User { get; set; } = null!;

    /// <summary>
    /// Time entries for this task
    /// </summary>
    public ICollection<TimeEntry> TimeEntries { get; set; } = new List<TimeEntry>();

    // Helper properties for JSON serialization

    /// <summary>
    /// Get tags as string list
    /// </summary>
    [NotMapped]
    public List<string> Tags
    {
        get => string.IsNullOrEmpty(TagsJson) 
            ? new List<string>() 
            : JsonSerializer.Deserialize<List<string>>(TagsJson) ?? new List<string>();
        set => TagsJson = JsonSerializer.Serialize(value);
    }

    /// <summary>
    /// Get metadata as dictionary
    /// </summary>
    [NotMapped]
    public Dictionary<string, object> Metadata
    {
        get => string.IsNullOrEmpty(MetadataJson) 
            ? new Dictionary<string, object>() 
            : JsonSerializer.Deserialize<Dictionary<string, object>>(MetadataJson) ?? new Dictionary<string, object>();
        set => MetadataJson = JsonSerializer.Serialize(value);
    }
}

/// <summary>
/// Task status enumeration
/// </summary>
public enum TaskStatus
{
    /// <summary>
    /// Task is waiting to be started
    /// </summary>
    Pending = 0,

    /// <summary>
    /// Task is currently being worked on
    /// </summary>
    InProgress = 1,

    /// <summary>
    /// Task has been completed
    /// </summary>
    Completed = 2,

    /// <summary>
    /// Task has been cancelled
    /// </summary>
    Cancelled = 3,

    /// <summary>
    /// Task has been paused
    /// </summary>
    Paused = 4,

    /// <summary>
    /// Task is blocked by dependencies
    /// </summary>
    Blocked = 5
}