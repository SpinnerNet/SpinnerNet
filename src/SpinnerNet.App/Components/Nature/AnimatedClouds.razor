@inject IJSRuntime JSRuntime

<div class="clouds-container">
    @for (int i = 0; i < _cloudCount; i++)
    {
        var cloudStyle = GetCloudStyle(i);
        var cloudSize = GetCloudSize(i);
        
        <div class="cloud @cloudSize" style="@cloudStyle">
            <svg viewBox="0 0 100 60" fill="none" xmlns="http://www.w3.org/2000/svg">
                <!-- Cloud shape -->
                <path d="M25 45 C15 45, 10 35, 15 25 C15 15, 25 10, 35 15 C45 5, 65 10, 65 25 C75 25, 80 35, 70 40 C75 50, 65 55, 55 50 L25 50 Z" 
                      fill="url(#cloudGradient)" opacity="0.8"/>
                
                <!-- Gradient definition -->
                <defs>
                    <linearGradient id="cloudGradient" x1="0%" y1="0%" x2="0%" y2="100%">
                        <stop offset="0%" style="stop-color:#ffffff;stop-opacity:0.9" />
                        <stop offset="100%" style="stop-color:#f8fafc;stop-opacity:0.7" />
                    </linearGradient>
                </defs>
            </svg>
        </div>
    }
</div>

<style>
    .clouds-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 60%;
        overflow: hidden;
        pointer-events: none;
    }

    .cloud {
        position: absolute;
        animation: drift var(--drift-duration) infinite linear;
        animation-delay: var(--animation-delay);
        opacity: 0;
        filter: blur(0.5px);
    }

    .cloud.small {
        width: 60px;
        height: 36px;
    }

    .cloud.medium {
        width: 80px;
        height: 48px;
    }

    .cloud.large {
        width: 120px;
        height: 72px;
    }

    @@keyframes drift {
        0% {
            transform: translateX(-150px);
            opacity: 0;
        }
        10% {
            opacity: 0.6;
        }
        90% {
            opacity: 0.6;
        }
        100% {
            transform: translateX(calc(100vw + 150px));
            opacity: 0;
        }
    }

    /* Subtle floating motion */
    .cloud::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        animation: gentle-float 8s ease-in-out infinite;
        animation-delay: var(--float-delay);
    }

    @@keyframes gentle-float {
        0%, 100% {
            transform: translateY(0px);
        }
        50% {
            transform: translateY(-5px);
        }
    }

    /* Different cloud layers */
    .cloud.layer-1 {
        z-index: 1;
        filter: blur(1px);
        opacity: 0.4;
    }

    .cloud.layer-2 {
        z-index: 2;
        filter: blur(0.5px);
        opacity: 0.6;
    }

    .cloud.layer-3 {
        z-index: 3;
        filter: none;
        opacity: 0.8;
    }

    /* Accessibility - reduce motion */
    @@media (prefers-reduced-motion: reduce) {
        .cloud {
            animation: none;
            opacity: 0.3;
            position: absolute;
        }
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .cloud.small {
            width: 40px;
            height: 24px;
        }
        
        .cloud.medium {
            width: 60px;
            height: 36px;
        }
        
        .cloud.large {
            width: 80px;
            height: 48px;
        }
    }
</style>

@code {
    [Parameter] public int CloudCount { get; set; } = 6;
    [Parameter] public int MinDriftDuration { get; set; } = 30;
    [Parameter] public int MaxDriftDuration { get; set; } = 60;

    private int _cloudCount;
    private List<CloudInfo> _clouds = new();

    protected override void OnInitialized()
    {
        _cloudCount = CloudCount;
        GenerateClouds();
    }

    private void GenerateClouds()
    {
        for (int i = 0; i < _cloudCount; i++)
        {
            var random = new Random(i + DateTime.Now.Millisecond);
            _clouds.Add(new CloudInfo
            {
                Id = Guid.NewGuid(),
                Top = random.Next(5, 40), // Keep in upper portion
                DriftDuration = random.Next(MinDriftDuration, MaxDriftDuration),
                Delay = random.Next(0, MaxDriftDuration),
                FloatDelay = random.Next(0, 8),
                Size = GetRandomCloudSize(random),
                Layer = random.Next(1, 4)
            });
        }
    }

    private string GetRandomCloudSize(Random random)
    {
        var sizes = new[] { "small", "medium", "large" };
        var weights = new[] { 40, 40, 20 }; // More small and medium clouds
        
        var totalWeight = weights.Sum();
        var randomValue = random.Next(totalWeight);
        var cumulativeWeight = 0;
        
        for (int i = 0; i < sizes.Length; i++)
        {
            cumulativeWeight += weights[i];
            if (randomValue < cumulativeWeight)
                return sizes[i];
        }
        
        return "medium";
    }

    private string GetCloudStyle(int index)
    {
        if (index >= _clouds.Count) return "";
        
        var cloud = _clouds[index];
        return $"top: {cloud.Top}%; " +
               $"--drift-duration: {cloud.DriftDuration}s; " +
               $"--animation-delay: {cloud.Delay}s; " +
               $"--float-delay: {cloud.FloatDelay}s;";
    }

    private string GetCloudSize(int index)
    {
        if (index >= _clouds.Count) return "medium";
        var cloud = _clouds[index];
        return $"{cloud.Size} layer-{cloud.Layer}";
    }

    private class CloudInfo
    {
        public Guid Id { get; set; }
        public int Top { get; set; }
        public int DriftDuration { get; set; }
        public int Delay { get; set; }
        public int FloatDelay { get; set; }
        public string Size { get; set; } = "medium";
        public int Layer { get; set; } = 2;
    }
}