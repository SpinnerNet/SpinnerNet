@using SpinnerNet.Core.Features.Tasks
@using SpinnerNet.Shared.Models.CosmosDb
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using System.ComponentModel.DataAnnotations
@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h5">
                <MudIcon Icon="Icons.Material.Filled.Task" Class="mr-2" />
                Zeitsparkasse - Your Time Management Companion
            </MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudGrid>
            <!-- Natural Language Input -->
            <MudItem xs="12">
                <MudTextField @bind-Value="naturalLanguageInput"
                             Label="@GetLocalizedPrompt()"
                             Placeholder="@GetLocalizedPlaceholder()"
                             Variant="Variant.Outlined"
                             Lines="2"
                             Immediate="true"
                             OnKeyUp="@((KeyboardEventArgs e) => { if (e.Key == "Enter" && !e.ShiftKey) CreateTaskFromInput(); })"
                             Adornment="Adornment.End"
                             AdornmentIcon="@(isProcessing ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Send)"
                             AdornmentColor="Color.Primary"
                             OnAdornmentClick="CreateTaskFromInput"
                             Disabled="@isProcessing" />
                
                @if (isProcessing)
                {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mt-2" />
                    <MudText Typo="Typo.caption" Class="mt-1">
                        @processingMessage
                    </MudText>
                }
            </MudItem>

            <!-- Quick Action Buttons -->
            <MudItem xs="12">
                <MudChipSet T="string">
                    @foreach (var suggestion in quickSuggestions)
                    {
                        <MudChip T="string" Color="Color.Primary" 
                                Variant="Variant.Outlined" 
                                OnClick="@(() => UseQuickSuggestion(suggestion))">
                            @suggestion
                        </MudChip>
                    }
                </MudChipSet>
            </MudItem>

            <!-- Recent Task Creation Result -->
            @if (lastCreatedTask != null && lastAiInsights != null)
            {
                <MudItem xs="12">
                    <MudExpansionPanels MultiExpansion="false" Elevation="2">
                        <MudExpansionPanel Text="@($"âœ“ {lastCreatedTask.Title}")" MaxHeight="400">
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    <MudCard Elevation="1">
                                        <MudCardHeader>
                                            <CardHeaderContent>
                                                <MudText Typo="Typo.h6">Task Details</MudText>
                                            </CardHeaderContent>
                                        </MudCardHeader>
                                        <MudCardContent>
                                            <MudText><strong>Title:</strong> @lastCreatedTask.Title</MudText>
                                            <MudText><strong>Category:</strong> @lastCreatedTask.Category</MudText>
                                            <MudText><strong>Priority:</strong> @lastCreatedTask.Priority</MudText>
                                            @if (lastCreatedTask.DueDate.HasValue)
                                            {
                                                <MudText><strong>Due:</strong> @lastCreatedTask.DueDate.Value.ToString("MMM dd, yyyy h:mm tt")</MudText>
                                            }
                                            @if (lastCreatedTask.EstimatedMinutes.HasValue)
                                            {
                                                <MudText><strong>Estimated Time:</strong> @lastCreatedTask.EstimatedMinutes minutes</MudText>
                                            }
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudCard Elevation="1">
                                        <MudCardHeader>
                                            <CardHeaderContent>
                                                <MudText Typo="Typo.h6">AI Insights</MudText>
                                            </CardHeaderContent>
                                        </MudCardHeader>
                                        <MudCardContent>
                                            <MudText><strong>Confidence:</strong> @($"{lastAiInsights.Confidence:P0}")</MudText>
                                            <MudText><strong>Processing Time:</strong> @($"{lastAiInsights.ProcessingTime.TotalMilliseconds:F0}ms")</MudText>
                                            @if (lastAiInsights.DetectedEntities.Any())
                                            {
                                                <MudText><strong>Detected:</strong> @string.Join(", ", lastAiInsights.DetectedEntities)</MudText>
                                            }
                                            @if (lastAiInsights.SuggestedTags.Any())
                                            {
                                                <div class="mt-2">
                                                    @foreach (var tag in lastAiInsights.SuggestedTags)
                                                    {
                                                        <MudChip T="string" Size="Size.Small" Color="Color.Secondary">@tag</MudChip>
                                                    }
                                                </div>
                                            }
                                        </MudCardContent>
                                    </MudCard>
                                </MudItem>
                                @if (lastSuggestedActions.Any())
                                {
                                    <MudItem xs="12">
                                        <MudCard Elevation="1">
                                            <MudCardHeader>
                                                <CardHeaderContent>
                                                    <MudText Typo="Typo.h6">Suggested Actions</MudText>
                                                </CardHeaderContent>
                                            </MudCardHeader>
                                            <MudCardContent>
                                                @foreach (var action in lastSuggestedActions)
                                                {
                                                    <MudButton StartIcon="@GetActionIcon(action.Type)"
                                                              Color="Color.Info"
                                                              Variant="Variant.Outlined"
                                                              Size="Size.Small"
                                                              Class="mr-2 mb-2"
                                                              OnClick="@(() => ExecuteSuggestedAction(action))">
                                                        @action.Title
                                                    </MudButton>
                                                }
                                            </MudCardContent>
                                        </MudCard>
                                    </MudItem>
                                }
                            </MudGrid>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                </MudItem>
            }

            <!-- Today's Tasks Preview -->
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Class="mb-3">Today's Time Investment</MudText>
                <MudSimpleTable Hover="true" Dense="true">
                    <thead>
                        <tr>
                            <th>Task</th>
                            <th>Category</th>
                            <th>Time Est.</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var task in todaysTasks)
                        {
                            <tr>
                                <td>
                                    <MudText>@task.Title</MudText>
                                    @if (task.Priority == TaskPriority.Urgent)
                                    {
                                        <MudIcon Icon="Icons.Material.Filled.PriorityHigh" Color="Color.Error" Size="Size.Small" />
                                    }
                                </td>
                                <td><MudChip T="string" Size="Size.Small" Color="GetCategoryColor(task.Category)">@task.Category</MudChip></td>
                                <td>@(task.EstimatedMinutes ?? 15) min</td>
                                <td>
                                    <MudIcon Icon="@GetStatusIcon(task.Status)" Color="@GetStatusColor(task.Status)" />
                                </td>
                            </tr>
                        }
                        @if (!todaysTasks.Any())
                        {
                            <tr>
                                <td colspan="4">
                                    <MudText Typo="Typo.body2" Class="text-center pa-4">
                                        No tasks for today yet. Create your first task above! ðŸŽ¯
                                    </MudText>
                                </td>
                            </tr>
                        }
                    </tbody>
                </MudSimpleTable>
            </MudItem>
        </MudGrid>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public string? UserId { get; set; }
    [Parameter] public string Language { get; set; } = "en";
    [Parameter] public string Timezone { get; set; } = "UTC";
    [Parameter] public EventCallback<TaskDocument> OnTaskCreated { get; set; }

    private string naturalLanguageInput = string.Empty;
    private bool isProcessing = false;
    private string processingMessage = "Analyzing your request...";
    
    private TaskDocument? lastCreatedTask;
    private CreateTask.TaskAIInsights? lastAiInsights;
    private List<CreateTask.SuggestedAction> lastSuggestedActions = new();
    private List<TaskDocument> todaysTasks = new();

    private readonly string[] quickSuggestions = new[]
    {
        "Call mom",
        "Buy groceries", 
        "Exercise 30 minutes",
        "Review emails",
        "Plan weekend"
    };

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            UserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        // In a real implementation, load today's tasks from backend
        // await LoadTodaysTasks();
    }

    private async System.Threading.Tasks.Task CreateTaskFromInput()
    {
        if (string.IsNullOrWhiteSpace(naturalLanguageInput) || isProcessing || string.IsNullOrEmpty(UserId))
            return;

        try
        {
            isProcessing = true;
            processingMessage = GetLocalizedProcessingMessage();
            StateHasChanged();

            var command = new CreateTask.Command
            {
                UserId = UserId,
                Input = naturalLanguageInput,
                Language = Language,
                Timezone = Timezone
            };

            var result = await Mediator.Send(command);

            if (result.Success && result.Task != null)
            {
                lastCreatedTask = result.Task;
                lastAiInsights = result.AIInsights;
                lastSuggestedActions = result.SuggestedActions;
                
                // Add to today's tasks if due today
                if (result.Task.DueDate?.Date == DateTime.UtcNow.Date)
                {
                    todaysTasks.Insert(0, result.Task);
                }

                naturalLanguageInput = string.Empty;
                await OnTaskCreated.InvokeAsync(result.Task);
                
                Snackbar.Add($"âœ“ Task created: {result.Task.Title}", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Error creating task: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
            StateHasChanged();
        }
    }

    private void UseQuickSuggestion(string suggestion)
    {
        naturalLanguageInput = GetLocalizedSuggestion(suggestion);
        StateHasChanged();
    }

    private async System.Threading.Tasks.Task ExecuteSuggestedAction(CreateTask.SuggestedAction action)
    {
        Snackbar.Add($"Executing: {action.Title} (Coming soon!)", Severity.Info);
        // TODO: Implement suggested action execution
    }

    private string GetLocalizedPrompt()
    {
        return Language switch
        {
            "de" => "Was mÃ¶chtest du heute erreichen?",
            "es" => "Â¿QuÃ© quieres lograr hoy?",
            "fr" => "Que veux-tu accomplir aujourd'hui ?",
            _ => "What would you like to accomplish today?"
        };
    }

    private string GetLocalizedPlaceholder()
    {
        return Language switch
        {
            "de" => "z.B. 'Erinnere mich daran, Mama morgen anzurufen'",
            "es" => "ej. 'RecuÃ©rdame llamar a mamÃ¡ maÃ±ana'",
            "fr" => "ex. 'Rappelle-moi d'appeler maman demain'",
            _ => "e.g. 'Remind me to call mom tomorrow'"
        };
    }

    private string GetLocalizedProcessingMessage()
    {
        return Language switch
        {
            "de" => "Analysiere deine Anfrage mit KI...",
            "es" => "Analizando tu solicitud con IA...",
            "fr" => "Analyse de ta demande avec l'IA...",
            _ => "Analyzing your request with AI..."
        };
    }

    private string GetLocalizedSuggestion(string suggestion)
    {
        return (Language, suggestion) switch
        {
            ("de", "Call mom") => "Mama anrufen",
            ("de", "Buy groceries") => "Einkaufen gehen",
            ("de", "Exercise 30 minutes") => "30 Minuten Sport machen",
            ("de", "Review emails") => "E-Mails durchgehen",
            ("de", "Plan weekend") => "Wochenende planen",
            ("es", "Call mom") => "Llamar a mamÃ¡",
            ("es", "Buy groceries") => "Comprar comestibles",
            ("es", "Exercise 30 minutes") => "Hacer ejercicio 30 minutos",
            ("es", "Review emails") => "Revisar correos",
            ("es", "Plan weekend") => "Planificar fin de semana",
            _ => suggestion
        };
    }

    private string GetActionIcon(string actionType)
    {
        return actionType switch
        {
            "set_reminder" => Icons.Material.Filled.NotificationsActive,
            "break_down_task" => Icons.Material.Filled.List,
            "link_to_goal" => Icons.Material.Filled.Link,
            _ => Icons.Material.Filled.Lightbulb
        };
    }

    private Color GetCategoryColor(string category)
    {
        return category switch
        {
            "work" => Color.Primary,
            "health" => Color.Success,
            "family" => Color.Secondary,
            "shopping" => Color.Info,
            "home" => Color.Warning,
            "finance" => Color.Dark,
            _ => Color.Default
        };
    }

    private string GetStatusIcon(SpinnerNet.Shared.Models.CosmosDb.TaskStatus status)
    {
        return status switch
        {
            SpinnerNet.Shared.Models.CosmosDb.TaskStatus.Pending => Icons.Material.Filled.Schedule,
            SpinnerNet.Shared.Models.CosmosDb.TaskStatus.InProgress => Icons.Material.Filled.PlayArrow,
            SpinnerNet.Shared.Models.CosmosDb.TaskStatus.Completed => Icons.Material.Filled.CheckCircle,
            SpinnerNet.Shared.Models.CosmosDb.TaskStatus.Cancelled => Icons.Material.Filled.Cancel,
            _ => Icons.Material.Filled.Help
        };
    }

    private Color GetStatusColor(SpinnerNet.Shared.Models.CosmosDb.TaskStatus status)
    {
        return status switch
        {
            SpinnerNet.Shared.Models.CosmosDb.TaskStatus.Pending => Color.Default,
            SpinnerNet.Shared.Models.CosmosDb.TaskStatus.InProgress => Color.Primary,
            SpinnerNet.Shared.Models.CosmosDb.TaskStatus.Completed => Color.Success,
            SpinnerNet.Shared.Models.CosmosDb.TaskStatus.Cancelled => Color.Error,
            _ => Color.Default
        };
    }
}