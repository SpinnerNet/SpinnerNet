@using SpinnerNet.Core.Features.Buddies
@using SpinnerNet.Shared.Models.CosmosDb
@using SpinnerNet.Shared.Models
@using SpinnerNet.Shared.Extensions
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@inject IMediator Mediator
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime

<MudCard Elevation="3" Style="height: 600px; display: flex; flex-direction: column;">
    <MudCardHeader>
        <CardHeaderContent>
            <div style="display: flex; align-items: center; gap: 12px;">
                <MudAvatar Color="@GetBuddyAvatarColor()" Size="Size.Medium">
                    @GetBuddyEmoji()
                </MudAvatar>
                <div>
                    <MudText Typo="Typo.h6">@(buddy?.BasicInfo.Name ?? "AI Buddy")</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">
                        @GetBuddyStatusText() • @(conversationState?.CurrentTopic ?? "Ready to help")
                    </MudText>
                </div>
                <MudSpacer />
                @if (isTyping)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                }
                <MudIcon Icon="@(isConnected ? Icons.Material.Filled.Circle : Icons.Material.Outlined.Circle)"
                         Color="@(isConnected ? Color.Success : Color.Warning)"
                         Size="Size.Small" />
            </div>
        </CardHeaderContent>
    </MudCardHeader>

    <!-- Chat Messages -->
    <MudCardContent Style="flex: 1; overflow-y: auto; padding: 8px;">
        <div @ref="chatContainer">
        @if (conversationMessages.Any())
        {
            @foreach (var message in conversationMessages)
            {
                <div class="message-container @(message.SenderType == "user" ? "user-message" : "buddy-message")" style="margin-bottom: 16px;">
                    @if (message.SenderType == "buddy")
                    {
                        <div style="display: flex; align-items: flex-start; gap: 8px;">
                            <MudAvatar Size="Size.Small" Color="@GetBuddyAvatarColor()">
                                @GetEmotionEmoji(message.Metadata.GetValueOrDefault("emotion", "helpful")?.ToString())
                            </MudAvatar>
                            <div style="flex: 1;">
                                <MudPaper Style="background: #f5f5f5; padding: 12px; border-radius: 12px; max-width: 80%;">
                                    <MudText Style="margin: 0;">@message.Content</MudText>
                                    @if (message.Metadata.ContainsKey("confidence"))
                                    {
                                        <MudText Typo="Typo.caption" Color="Color.Secondary" Style="margin-top: 4px;">
                                            Confidence: @($"{Convert.ToDouble(message.Metadata["confidence"]):P0}")
                                        </MudText>
                                    }
                                </MudPaper>
                                @if (message.Metadata.ContainsKey("follow_up_questions"))
                                {
                                    var followUps = System.Text.Json.JsonSerializer.Deserialize<List<string>>(message.Metadata["follow_up_questions"].ToString());
                                    if (followUps?.Any() == true)
                                    {
                                        <div style="margin-top: 8px;">
                                            @foreach (var followUp in followUps.Take(3))
                                            {
                                                <MudChip T="string" Size="Size.Small" 
                                                        Color="Color.Info" 
                                                        Variant="Variant.Outlined"
                                                        OnClick="@(() => SendFollowUpQuestion(followUp))"
                                                        Style="margin: 2px; cursor: pointer;">
                                                    @followUp
                                                </MudChip>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                    else
                    {
                        <div style="display: flex; justify-content: flex-end;">
                            <MudPaper Style="background: #1976d2; color: white; padding: 12px; border-radius: 12px; max-width: 80%;">
                                <MudText Style="margin: 0; color: white;">@message.Content</MudText>
                            </MudPaper>
                        </div>
                    }
                    <MudText Typo="Typo.caption" Color="Color.Secondary" 
                             Style="@($"margin-top: 4px; text-align: {(message.SenderType == "user" ? "right" : "left")};")">
                        @message.Timestamp.ToString("HH:mm")
                    </MudText>
                </div>
            }
        }
        else
        {
            <div style="text-align: center; margin-top: 40px;">
                <MudText Typo="Typo.h6" Color="Color.Secondary">
                    👋 Say hello to your AI buddy!
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Style="margin-top: 8px;">
                    I'm here to help with tasks, questions, and conversation.
                </MudText>
            </div>
        }

        @if (isTyping)
        {
            <div class="message-container buddy-message">
                <div style="display: flex; align-items: flex-start; gap: 8px;">
                    <MudAvatar Size="Size.Small" Color="@GetBuddyAvatarColor()">
                        💭
                    </MudAvatar>
                    <MudPaper Style="background: #f5f5f5; padding: 12px; border-radius: 12px;">
                        <div class="typing-indicator">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </MudPaper>
                </div>
            </div>
        }
        </div>
    </MudCardContent>

    <!-- Suggested Actions -->
    @if (suggestedActions.Any())
    {
        <MudCardContent Style="padding: 8px; border-top: 1px solid #e0e0e0;">
            <MudText Typo="Typo.caption" Color="Color.Secondary" Style="margin-bottom: 4px;">Suggested actions:</MudText>
            <div style="display: flex; flex-wrap: wrap; gap: 4px;">
                @foreach (var action in suggestedActions.Take(4))
                {
                    <MudButton Size="Size.Small" 
                              Variant="Variant.Outlined" 
                              Color="Color.Primary"
                              StartIcon="@GetActionIcon(action.Type)"
                              OnClick="@(() => ExecuteSuggestedAction(action))">
                        @action.Title
                    </MudButton>
                }
            </div>
        </MudCardContent>
    }

    <!-- Message Input -->
    <MudCardActions Style="padding: 16px; border-top: 1px solid #e0e0e0;">
        <div style="display: flex; width: 100%; gap: 8px; align-items: flex-end;">
            <MudTextField @bind-Value="messageInput"
                         Label="Type your message..."
                         Variant="Variant.Outlined"
                         Lines="1"
                         MaxLines="3"
                         Immediate="true"
                         OnKeyUp="@((KeyboardEventArgs e) => { if (e.Key == "Enter" && !e.ShiftKey) SendMessage(); })"
                         Disabled="@(isTyping || !isConnected)"
                         Style="flex: 1;" />
            
            <MudButton Color="Color.Primary" 
                      Variant="Variant.Filled"
                      StartIcon="@(isTyping ? Icons.Material.Filled.HourglassEmpty : Icons.Material.Filled.Send)"
                      OnClick="SendMessage"
                      Disabled="@(string.IsNullOrWhiteSpace(messageInput) || isTyping || !isConnected)">
                @(isTyping ? "..." : "Send")
            </MudButton>
        </div>
        
        <!-- Quick Message Suggestions -->
        @if (!conversationMessages.Any())
        {
            <div style="margin-top: 8px; display: flex; flex-wrap: wrap; gap: 4px;">
                @foreach (var suggestion in quickStarters)
                {
                    <MudChip T="string" Size="Size.Small" 
                            Color="Color.Secondary" 
                            Variant="Variant.Outlined"
                            OnClick="@(() => UseQuickStarter(suggestion))">
                        @suggestion
                    </MudChip>
                }
            </div>
        }
    </MudCardActions>
</MudCard>

<style>
    .typing-indicator {
        display: flex;
        gap: 4px;
        align-items: center;
    }
    
    .typing-indicator span {
        height: 8px;
        width: 8px;
        background-color: #666;
        border-radius: 50%;
        animation: typing 1.4s infinite ease-in-out;
    }
    
    .typing-indicator span:nth-child(2) {
        animation-delay: 0.2s;
    }
    
    .typing-indicator span:nth-child(3) {
        animation-delay: 0.4s;
    }
    
    @@keyframes typing {
        0%, 80%, 100% {
            transform: scale(0.8);
            opacity: 0.5;
        }
        40% {
            transform: scale(1);
            opacity: 1;
        }
    }
</style>

@code {
    [Parameter] public string? UserId { get; set; }
    [Parameter] public string? BuddyId { get; set; }
    [Parameter] public BuddyDocument? Buddy { get; set; }
    [Parameter] public string Language { get; set; } = "en";
    [Parameter] public EventCallback<string> OnTaskCreated { get; set; }

    private BuddyDocument? buddy;
    private string messageInput = string.Empty;
    private string? conversationId;
    private bool isTyping = false;
    private bool isConnected = true;
    private ElementReference chatContainer;
    
    private ChatWithBuddy.ConversationState? conversationState;
    private List<SpinnerNet.Shared.Models.ConversationMessage> conversationMessages = new();
    private List<ChatWithBuddy.SuggestedChatAction> suggestedActions = new();

    private readonly string[] quickStarters = new[]
    {
        "Hello! 👋",
        "How can you help me?",
        "Show me my tasks",
        "What can you do?",
        "I need to plan my day"
    };

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(UserId))
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            UserId = authState.User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
        }

        buddy = Buddy;
        
        // In a real implementation, load conversation history
        // await LoadConversationHistory();
    }

    private async System.Threading.Tasks.Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(messageInput) || isTyping || string.IsNullOrEmpty(UserId) || string.IsNullOrEmpty(BuddyId))
            return;

        var message = messageInput.Trim();
        messageInput = string.Empty;
        
        // Add user message immediately
        AddUserMessage(message);
        
        try
        {
            isTyping = true;
            StateHasChanged();
            await ScrollToBottom();

            var command = new ChatWithBuddy.Command
            {
                UserId = UserId,
                BuddyId = BuddyId,
                Message = message,
                ConversationId = conversationId,
                MessageType = DetectMessageType(message),
                Context = BuildChatContext(),
                StreamResponse = false
            };

            var result = await Mediator.Send(command);

            if (result.Success && result.BuddyResponse != null)
            {
                conversationId = result.ConversationId;
                conversationState = result.ConversationState;
                suggestedActions = result.SuggestedActions;

                // Add buddy response
                AddBuddyMessage(result.BuddyResponse, result.MessageId ?? Guid.NewGuid().ToString());

                // Handle task creation if response type indicates it
                if (result.BuddyResponse.ResponseType == ResponseType.TaskCreated)
                {
                    await OnTaskCreated.InvokeAsync(message);
                }

                await ScrollToBottom();
            }
            else
            {
                Snackbar.Add($"Error: {result.ErrorMessage}", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to send message: {ex.Message}", Severity.Error);
        }
        finally
        {
            isTyping = false;
            StateHasChanged();
        }
    }

    private async System.Threading.Tasks.Task SendFollowUpQuestion(string question)
    {
        messageInput = question;
        await SendMessage();
    }

    private void UseQuickStarter(string starter)
    {
        messageInput = starter;
        StateHasChanged();
    }

    private async System.Threading.Tasks.Task ExecuteSuggestedAction(ChatWithBuddy.SuggestedChatAction action)
    {
        switch (action.Type)
        {
            case "view_tasks":
                Snackbar.Add("Opening task view... (Feature coming soon!)", Severity.Info);
                break;
            case "overdue_tasks":
                messageInput = "Show me my overdue tasks";
                await SendMessage();
                break;
            case "set_reminder":
                Snackbar.Add("Opening reminder settings... (Feature coming soon!)", Severity.Info);
                break;
            default:
                messageInput = $"Help me with {action.Title.ToLowerInvariant()}";
                await SendMessage();
                break;
        }
    }

    private void AddUserMessage(string message)
    {
        conversationMessages.Add(new SpinnerNet.Shared.Models.ConversationMessage
        {
            Id = Guid.NewGuid().ToString(),
            SenderId = UserId ?? "",
            SenderType = "user",
            Content = message,
            Timestamp = DateTime.UtcNow
        });
        
        StateHasChanged();
    }

    private void AddBuddyMessage(ChatWithBuddy.BuddyResponse response, string messageId)
    {
        conversationMessages.Add(new SpinnerNet.Shared.Models.ConversationMessage
        {
            Id = messageId + "_buddy",
            SenderId = BuddyId ?? "",
            SenderType = "buddy",
            Content = response.Message,
            Timestamp = DateTime.UtcNow,
            Metadata = new Dictionary<string, object>
            {
                ["emotion"] = response.Emotion,
                ["confidence"] = response.Confidence,
                ["used_capabilities"] = System.Text.Json.JsonSerializer.Serialize(response.UsedCapabilities),
                ["follow_up_questions"] = System.Text.Json.JsonSerializer.Serialize(response.FollowUpQuestions)
            }
        });
        
        StateHasChanged();
    }

    private MessageType DetectMessageType(string message)
    {
        var messageLower = message.ToLowerInvariant();
        
        if (messageLower.Contains("hello") || messageLower.Contains("hi") || messageLower.Contains("hey"))
            return MessageType.Greeting;
        
        if (messageLower.Contains("remind") || messageLower.Contains("task") || messageLower.Contains("todo"))
            return MessageType.Action;
        
        if (messageLower.Contains("?") || messageLower.Contains("what") || messageLower.Contains("how"))
            return MessageType.Text;
        
        if (messageLower.Contains("bye") || messageLower.Contains("goodbye") || messageLower.Contains("see you"))
            return MessageType.Text;
        
        return MessageType.Text;
    }

    private ChatWithBuddy.ChatContext BuildChatContext()
    {
        return new ChatWithBuddy.ChatContext
        {
            TimeOfDay = GetTimeOfDay(),
            DeviceType = "web",
            CurrentMood = "neutral"
        };
    }

    private string GetTimeOfDay()
    {
        var hour = DateTime.Now.Hour;
        return hour switch
        {
            >= 5 and < 12 => "morning",
            >= 12 and < 17 => "afternoon", 
            >= 17 and < 21 => "evening",
            _ => "night"
        };
    }

    private string GetBuddyStatusText()
    {
        if (!isConnected) return "Disconnected";
        if (isTyping) return "Typing...";
        if (conversationState != null) return $"{conversationState.BuddyMood.ToTitleCase()} mood";
        return "Online";
    }

    private Color GetBuddyAvatarColor()
    {
        return buddy?.Personality.CommunicationStyle.Tone switch
        {
            "friendly" => Color.Success,
            "professional" => Color.Primary,
            "enthusiastic" => Color.Warning,
            "supportive" => Color.Info,
            _ => Color.Default
        };
    }

    private string GetBuddyEmoji()
    {
        return buddy?.Personality.CommunicationStyle.Tone switch
        {
            "friendly" => "😊",
            "professional" => "💼",
            "enthusiastic" => "🎉",
            "supportive" => "🤗",
            "motivating" => "💪",
            _ => "🤖"
        };
    }

    private string GetEmotionEmoji(string? emotion)
    {
        return emotion switch
        {
            "helpful" => "😊",
            "friendly" => "😄",
            "knowledgeable" => "🤓",
            "supportive" => "🤗",
            "enthusiastic" => "🎉",
            "thoughtful" => "🤔",
            "encouraging" => "👍",
            _ => "😊"
        };
    }

    private string GetActionIcon(string actionType)
    {
        return actionType switch
        {
            "view_tasks" => Icons.Material.Filled.Task,
            "overdue_tasks" => Icons.Material.Filled.Warning,
            "set_reminder" => Icons.Material.Filled.NotificationsActive,
            "schedule" => Icons.Material.Filled.Schedule,
            "help" => Icons.Material.Filled.Help,
            _ => Icons.Material.Filled.Lightbulb
        };
    }

    private async System.Threading.Tasks.Task ScrollToBottom()
    {
        try
        {
            await System.Threading.Tasks.Task.Delay(100); // Small delay to ensure DOM is updated
            await JSRuntime.InvokeVoidAsync("scrollToBottom", chatContainer);
        }
        catch (Exception)
        {
            // Ignore scrolling errors
        }
    }
}

<script>
    window.scrollToBottom = (element) => {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>